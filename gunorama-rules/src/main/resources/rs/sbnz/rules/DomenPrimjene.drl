package rs.sbnz.rules;

import java.util.Set;
import java.util.List;

import rs.sbnz.gunorama.model.facts.DomenPrimjeneFact;
import rs.sbnz.gunorama.model.facts.GradjaninZdravstvenoSposobanFact;
import rs.sbnz.gunorama.model.Zahtjev;
import rs.sbnz.gunorama.model.Dokument;
import rs.sbnz.gunorama.model.PotrebanUslov;
import rs.sbnz.gunorama.model.faze.DomenPrimjeneFaza;
import rs.sbnz.gunorama.model.enums.TipDokumenta;
import rs.sbnz.gunorama.model.enums.DomenPrimjene;


rule "Odredjivanje Domena Primjene - ODREDJEN DOMEN"
	agenda-group "Domen primjene"
	no-loop true
    salience ($saliencyValue * $listaTipovaDokumenata.size() + ($saliencyPriority))
    when
        $z: Zahtjev($id: id) and 
        $gzs: GradjaninZdravstvenoSposobanFact(zahtjevId == $id, sposoban == true) and
        $dpf: DomenPrimjeneFaza(zahtjevId == $id, $dokumenti: dokumenti ) and
        $pu: PotrebanUslov($domenPrimjene: domenPrimjene, $listaTipovaDokumenata: listaDokumenata) 
        Number($saliencyValue: intValue >= $listaTipovaDokumenata.size()) from accumulate (
            Dokument($tip: tipDokumenta, $tip memberOf $listaTipovaDokumenata) from $dokumenti,
            count($tip)
        )
        $filtriraniDokumenti: Set() from accumulate ( 
            $d: Dokument($tipDokumenta: tipDokumenta, $tipDokumenta memberOf $listaTipovaDokumenata) from $dokumenti;
            collectSet($d)
        )
        accumulate (
            Dokument($prioritetDokumenta: prioritet, $tipDokumenta: tipDokumenta) from $filtriraniDokumenti;
            $saliencyPriority: sum($prioritetDokumenta),
            $filtriraniTipoviDokumenata: collectList($tipDokumenta)
        )
        not (DomenPrimjeneFact(zahtjevId == $id))
    then
    	System.out.println("GRADJANINU ODREDJEN DOMEN PRIMJENE");
        modify($z) {
            setDokumenti($filtriraniTipoviDokumenata),
            setDomenPrimjene($domenPrimjene);
        }
        insert(new DomenPrimjeneFact($id, $domenPrimjene));
end

rule "Odredjivanje Domena Primjene - NEPOTPUNA DOKUMENTACIJA"
	agenda-group "Domen primjene"
	no-loop true
    salience -1
    when
        $z: Zahtjev($id: id) and 
        $gzs: GradjaninZdravstvenoSposobanFact(zahtjevId == $id, sposoban == true) and
        $dpf: DomenPrimjeneFaza(zahtjevId == $id, $dokumenti: dokumenti )
        $tipoviDokumenata: List() from accumulate ( 
            Dokument($tipDokumenta: tipDokumenta) from $dokumenti,
            collectList($tipDokumenta)
        )
        not (DomenPrimjeneFact(zahtjevId == $id))
    then
    	System.out.println("GRADJANINU NIJE ODREDJEN DOMEN PRIMJENE");
        modify($z) {
            setRazlogOdbijanja("Gradjanin je podnio nepotpunu dokumentaciju."),
            setDokumenti($tipoviDokumenata);
        }
end
